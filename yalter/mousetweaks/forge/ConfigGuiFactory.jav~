/*
 * Decompiled with CFR 0.150.
 * 
 * Could not load the following classes:
 *  net.minecraft.client.Minecraft
 *  net.minecraft.client.gui.GuiScreen
 *  net.minecraftforge.common.config.ConfigElement
 *  net.minecraftforge.common.config.Property
 *  net.minecraftforge.common.config.Property$Type
 *  net.minecraftforge.fml.client.IModGuiFactory
 *  net.minecraftforge.fml.client.IModGuiFactory$RuntimeOptionCategoryElement
 *  net.minecraftforge.fml.client.IModGuiFactory$RuntimeOptionGuiHandler
 *  net.minecraftforge.fml.client.config.GuiConfig
 *  net.minecraftforge.fml.client.config.IConfigElement
 */
package yalter.mousetweaks.forge;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.GuiScreen;
import net.minecraftforge.common.config.ConfigElement;
import net.minecraftforge.common.config.Property;
import net.minecraftforge.fml.client.IModGuiFactory;
import net.minecraftforge.fml.client.config.GuiConfig;
import net.minecraftforge.fml.client.config.IConfigElement;
import yalter.mousetweaks.Config;
import yalter.mousetweaks.Logger;
import yalter.mousetweaks.Main;
import yalter.mousetweaks.WheelScrollDirection;
import yalter.mousetweaks.WheelSearchOrder;

public class ConfigGuiFactory
implements IModGuiFactory {
    public void initialize(Minecraft minecraftInstance) {
    }

    public Class<? extends GuiScreen> mainConfigGuiClass() {
        return ConfigGui.class;
    }

    public Set<IModGuiFactory.RuntimeOptionCategoryElement> runtimeGuiCategories() {
        return null;
    }

    public IModGuiFactory.RuntimeOptionGuiHandler getHandlerFor(IModGuiFactory.RuntimeOptionCategoryElement element) {
        return null;
    }

    public static class ConfigGui
    extends GuiConfig {
        private static Property rmbTweak = new Property("RMB tweak", "true", Property.Type.BOOLEAN);
        private static Property lmbTweakWithItem = new Property("LMB tweak with item", "true", Property.Type.BOOLEAN);
        private static Property lmbTweakWithoutItem = new Property("LMB tweak without item", "true", Property.Type.BOOLEAN);
        private static Property wheelTweak = new Property("Wheel tweak", "true", Property.Type.BOOLEAN);
        private static Property wheelSearchOrder = new Property("Wheel tweak search order", "Last to first", Property.Type.STRING, new String[]{"First to last", "Last to first"});
        private static Property wheelScrollDirection = new Property("Wheel tweak scroll direction", "Down to push, up to pull", Property.Type.STRING, new String[]{"Down to push, up to pull", "Up to push, down to pull"});
        private static Property onTickMethodOrder = new Property("OnTick method order", "Forge, LiteLoader", Property.Type.STRING);
        private static Property debug = new Property("Debug", "false", Property.Type.BOOLEAN);
        private boolean is_open = false;

        public ConfigGui(GuiScreen parentScreen) {
            super(parentScreen, ConfigGui.getConfigElements(), "mousetweaks", false, false, ".minecraft/config/MouseTweaks.cfg");
        }

        private static List<IConfigElement> getConfigElements() {
            ArrayList<IConfigElement> list = new ArrayList<IConfigElement>();
            list.add((IConfigElement)new ConfigElement(rmbTweak));
            list.add((IConfigElement)new ConfigElement(lmbTweakWithItem));
            list.add((IConfigElement)new ConfigElement(lmbTweakWithoutItem));
            list.add((IConfigElement)new ConfigElement(wheelTweak));
            list.add((IConfigElement)new ConfigElement(wheelSearchOrder));
            list.add((IConfigElement)new ConfigElement(wheelScrollDirection));
            list.add((IConfigElement)new ConfigElement(onTickMethodOrder));
            list.add((IConfigElement)new ConfigElement(debug));
            return list;
        }

        public void func_73866_w_() {
            Logger.DebugLog("initGui()");
            if (!this.is_open) {
                this.is_open = true;
                Main.config.read();
                rmbTweak.set(Main.config.rmbTweak);
                lmbTweakWithItem.set(Main.config.lmbTweakWithItem);
                lmbTweakWithoutItem.set(Main.config.lmbTweakWithoutItem);
                wheelTweak.set(Main.config.wheelTweak);
                wheelSearchOrder.set(Main.config.wheelSearchOrder == WheelSearchOrder.FIRST_TO_LAST ? "First to last" : "Last to first");
                wheelScrollDirection.set(Main.config.wheelScrollDirection == WheelScrollDirection.NORMAL ? "Down to push, up to pull" : "Up to push, down to pull");
                onTickMethodOrder.set(Main.config.onTickMethodOrderString());
                debug.set(Config.debug);
            }
            super.func_73866_w_();
        }

        public void func_146281_b() {
            Logger.DebugLog("onGuiClosed()");
            Main.config.rmbTweak = rmbTweak.getBoolean();
            Main.config.lmbTweakWithItem = lmbTweakWithItem.getBoolean();
            Main.config.lmbTweakWithoutItem = lmbTweakWithoutItem.getBoolean();
            Main.config.wheelTweak = wheelTweak.getBoolean();
            Main.config.wheelSearchOrder = wheelSearchOrder.getString().equals("First to last") ? WheelSearchOrder.FIRST_TO_LAST : WheelSearchOrder.LAST_TO_FIRST;
            Main.config.wheelScrollDirection = wheelScrollDirection.getString().equals("Down to push, up to pull") ? WheelScrollDirection.NORMAL : WheelScrollDirection.INVERTED;
            Main.config.onTickMethodOrderFromString(onTickMethodOrder.getString());
            Config.debug = debug.getBoolean();
            Main.config.save();
            Main.findOnTickMethod(true);
            this.is_open = false;
            super.func_146281_b();
        }
    }
}

